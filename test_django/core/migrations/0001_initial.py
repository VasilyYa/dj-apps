# Generated by Django 3.1.7 on 2021-03-21 10:34

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=20, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Фамилия')),
                ('pen_name', models.CharField(max_length=50, null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('headshot', models.ImageField(upload_to='tmp', verbose_name='фотография')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Веб-страница')),
                ('type_of', models.PositiveIntegerField(default=2)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'composers',
                'ordering': ['first_name'],
            },
        ),
        migrations.CreateModel(
            name='ComposerScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('composer', models.ForeignKey(db_column='composer_id', on_delete=django.db.models.deletion.CASCADE, to='core.user')),
            ],
            options={
                'db_table': 'composers_scores',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Имя')),
                ('adress', models.CharField(blank=True, db_column='addr', max_length=50, null=True, verbose_name='Адрес')),
                ('website', models.URLField(null=True, verbose_name='Веб-сайт')),
            ],
            options={
                'db_table': 'publishers',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Ноты')),
                ('creation_date', models.DateField(blank=True, null=True, verbose_name='Дата создания муз. произведения')),
                ('publication_date', models.DateField(default=django.utils.timezone.now, null=True, verbose_name='Дата публикации нот')),
                ('composers', models.ManyToManyField(through='core.ComposerScore', to='core.User')),
                ('publisher', models.ForeignKey(blank=True, db_column='publisher_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.publisher', verbose_name='Издатель')),
            ],
            options={
                'db_table': 'scores',
                'ordering': ['publisher_id'],
            },
        ),
        migrations.AddField(
            model_name='composerscore',
            name='score',
            field=models.ForeignKey(db_column='score_id', on_delete=django.db.models.deletion.CASCADE, to='core.score'),
        ),
    ]
